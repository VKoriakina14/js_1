/* 
'number' + 3 + 3  

у прикладі 'number' + 3 + 3 відбувається конкатенація і перетворення 3 до типу даних string: 
'number' + 3 (3 перетворюється на string та конкатенується з “number” виходить “number3”, далі “number3”
 конкатенується з ще одним символом 3, який також перетворюється до string).

Результат: “number33”;
/////////////////////////////
null + 3   

у прикладі null + 3 Javascript перетворює null до чисельного типу даних, ми отримуємо 0, 0+3 = 3.

Результат: 3 
/////////////////////////////
5 && "qwerty" 

У прикладі 5 && "qwerty" Відбувається дія за допомогою логічного оператора І, в даному випадку в консоль 
повернеться “qwerty”, тому що даний оператор перевіряє на true/false, якщо перше true, повертає останнє true,
 якщо першим буде false перевірку буде закінчено і виведено false.
5 = true 
“qwerty” = true (выводится останнє true)

Результат: “qwerty”
////////////////////////////////
+'40' + +'2' + "hillel"; 

У прикладі +'40' + +'2' +  оператор + приводить 40 та 2 до чисельних типів і складає їх,
 ми отримуємо 42, тепер 42 + “hillel” 42 переводиться до string і відбувається конкатенація.

 Результат: “42hillel”
/////////////////////////////
 '10' - 5 === 6; 

У прикладі '10' - 5 === 6; “10” переводиться до чисельного типу даних,
 потім відбувається операція віднімання 10-5=5,
далі, відбувається операція строге рівно ===, в який 5 строго прирівнюється 6, це не є істинною.

Результат: false.
///////////////////////////
true + false 

У прикладі true + false JS приведе true + false у числа true=1 false=0 1+0=1 

Результат: 1 (true)
///////////////////////////
'4px' - 3 

У прикладі '4px' - 3 js намагатиметься перетворити '4px' і відняти 3.
 '4px' не є числом (NaN) - 3 = NaN (number)

Результат: Nan
//////////////////////////
'4' - 3 

У прикладі '4' - 3  js перетворить '4' на число та відніме його від 3 

Результат: 1
///////////////////////////
'6' + 3 ** 0; 
У прикладі '6' + 3 ** 0;  спочатку 3 виводить у ступінь 0 тому результат буде 1,
 після цього “6” перетворює 1 у string, та конкатенує їх.

Результат: “61”
///////////////////////
12 / '6' 
У прикладі 12 / '6'  12 ділиться на 6 (математична операція, тому “6” перетворюється на число) 12 / 6 = 2;

Результат: 2;
////////////////////////////
'10' + (5 === 6); 
У прикладі '10' + (5 === 6) спочатку 5 строго прирівнюється до 6, результатом цієї дії буде false,
 потім false перетворюється у string та конкатенується з 10.
 
Результат: “10false”
//////////////////////////
null == ''  false

у прикладі null == ''  null = null, порожня строка =false

Результат: false
////////////////////////
3 ** (9 / 3); 

У прикладі 3 ** (9 / 3) спочатку 9 ділиться на 3 = 3, потім 3 виводиться у ступінь 3 = 27

Результат 27
//////////////////////////
!!'false' == !!'true' true

У прикладі !!'false' == !!'true' відбувається подвійне заперечення строка “false” не є пустою, тому = 'true', 
 “false” = true 
таким самим чином відбувається з !!'true' = true
true == true = true

Результат: true
/////////////////////////////
0 || '0' && 1 

У прикладі 0 || '0' && 1 використовується логічний оператор || (або) та && (І)
спочатку “0” && 1 в даному випадку строка не пуста тому “0” = true
1 = true 
повертає останнє true
потім 0 || 1 
0 = false 
1 = true 
Операція || повертає перше true тобто 1

Результат: 1
///////////////////////////
(+null == false) < 1; 

У прикладі (+null == false) < 1; null приводиться до числа тобто 0, 0 є false 
false == false повертає true
true тобто 1 < 1 = false

Результат: false 
//////////////////////////
false && true || true  

У прикладі false && true || true  спочатку  false && true повертає перший  false
 потім  false || true завжди повертає перший true

 Результат: true
/////////////////////////
false && (false || true); 

У прикладі false && (false || true); спочатку відбувається операція || та повертає true потім && повертає перший false

Результат:  false
/////////////////////////////////
(+null == false) < 1 ** 5; 
У прикладі (+null == false) < 1 ** 5; (+null == false) null перетворюється у число 0, 0 = false,
 false==false = true, зводить 1 до ступеня 5, що дорівнює 1, оскільки будь-яке число, зведене в ступінь 0,
  залишається таким самим. порівняння true(1) < 1 = false
   
Результат: false


 */